import base64
import hashlib
from typing import Union


def hash_calc(hash_type: str, binary: bytes, output_type: str) -> Union[str, bytearray]:
    """
    Calculates hash value of a given byte string, using a given algorithms and an output encoding.
    
    :param hash_type: Type of the hash
    :param binary: Data
    :param output_type: Output encoding 
    
    >>> hash_calc('MD5', b'sample', 'hex')
    '5e8ff9bf55ba3508199d22e984129be6'
    
    >>> hash_calc('MD5', b'sample', 'base64')
    b'Xo/5v1W6NQgZnSLphBKb5g=='
    
    >>> hash_calc('MD5', open('sample.txt', 'rb').read(), 'bin')
    b'\\x00V\\x9f\\xa6\\x86r\\xd7}\\xf6kB\\xa1\\xa2PDl'

    """

    hash_type = hash_type.upper()
    algo = hashlib.new(hash_type)
    algo.update(binary)

    if output_type == 'hex':
        return algo.hexdigest()
    elif output_type == 'base64':
        return base64.standard_b64encode(algo.digest())
    elif output_type == 'base32':
        return base64.b32encode(algo.digest())
    elif output_type == 'base16':
        return base64.b16encode(algo.digest())
    else:
        return algo.digest()


if __name__ == '__main__':
    import doctest

    doctest.testmod(verbose=True)
