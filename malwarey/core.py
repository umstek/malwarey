def main():
    """ Analyse malware
    
    :return: None
    """

    import argparse
    from malwarey import file_glance, file_magic, hash_calc, known_malware

    parser = argparse.ArgumentParser(description='Analyse files for malware', prog='malwarey')
    parser.add_argument('files', nargs='+', help='List of files to be tested')
    args = parser.parse_args()

    print('MALWAREY - Malware Analytics Engine')
    print('-----------------------------------')

    files = args.files

    for f in files:
        print('File path: {}'.format(f))

        (mime_guess, encoding) = file_glance.guess_mime_type(f)
        print('Mime type guessed by extension: {}'.format(mime_guess))
        print('Encoding guessed by extension: {}'.format(encoding))

        details = file_glance.get_file_details(f)
        for key, value in details.items():
            print(key + ': ' + str(value))

        try:
            magic_guess = file_magic.from_file(f, mime=False)
        except file_magic.PureError:
            print('Could not identify file by magic numbers. ')
        else:
            print('File type by file magic: {}'.format(magic_guess))

        file_content = open(f, 'rb').read()
        file_md5 = hash_calc.hash_calc('md5', file_content, 'bin')

        print('MD5: ' + hash_calc.hash_calc('md5', file_content, 'hex'))
        print('SHA1: ' + hash_calc.hash_calc('sha1', file_content, 'base64'))
        print('SHA256: ' + hash_calc.hash_calc('sha256', file_content, 'base64'))

        print('Checking {} in malware hashes...'.format(f))
        if known_malware.is_known_malware(file_md5):
            print("WARNING: FILE APPEARS TO BE A MALWARE (MD5 hash match with known malware). ")
        else:
            print('Not found in malware database. ')

        print('... ... ...')


__all__ = ['main']
